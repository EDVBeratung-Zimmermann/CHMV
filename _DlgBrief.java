/*
 * Copyright (C) 2018 thoma
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package milesVerlagMain;

import java.awt.*;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.GroupLayout;
import static milesVerlagMain.Modulhelferlein.Ausgabe;
import static milesVerlagMain.Modulhelferlein.Linie;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import static org.apache.pdfbox.pdmodel.common.PDRectangle.A4;
import org.apache.pdfbox.pdmodel.font.PDFont;
import org.apache.pdfbox.pdmodel.font.PDType1Font;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

/**
 *
 * @author thoma
 */
public class _DlgBrief extends javax.swing.JDialog {

    /**
     * Creates new form _DlgBrief
     *
     * @param parent
     * @param modal
     */
    public _DlgBrief(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        conn = null;

        try { // Datenbank-Treiber laden
            Class.forName(Modulhelferlein.dbDriver);
        } catch (ClassNotFoundException exept) {
            Modulhelferlein.Fehlermeldung("DB-Bestellung", "Treiber nicht gefunden: ", exept.getMessage());
            System.exit(1);
        } // Datenbank-Treiber laden

        try { // Verbindung zur Datenbank über die JDBC-Brücke
            conn = DriverManager.getConnection(Modulhelferlein.dbUrl, Modulhelferlein.dbUser, Modulhelferlein.dbPassword);
        } catch (SQLException exept) {
            Modulhelferlein.Fehlermeldung("DB-Bestellung", "Verbindung nicht moeglich: ", exept.getMessage());
            System.exit(1);
        } // try Verbindung zur Datenbank über die JDBC-Brücke

        if (conn != null) {

            SQLAnfrageK = null; // Anfrage erzeugen für resultK => Aufbau Kundenliste

            try { // SQL-Anfragen an die Datenbank
                SQLAnfrageK = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);

                String eintrag = "0, ----------, -----------";
                jComboBoxAdresse.addItem(eintrag);

                // Auswahlliste für Kunden und Autoren erstellen   
                resultK = SQLAnfrageK.executeQuery("SELECT * FROM TBL_ADRESSE ORDER BY ADRESSEN_NAME");
                while (resultK.next()) {
                    eintrag = Integer.toString(resultK.getInt("ADRESSEN_ID")) + ", "
                            + resultK.getString("ADRESSEN_Name") + ", "
                            + resultK.getString("ADRESSEN_Vorname");
                    jComboBoxAdresse.addItem(eintrag);
                } // while
            } catch (SQLException exept) {
                Modulhelferlein.Fehlermeldung("DB-Bestellung", "Verbindung nicht moeglich: ", exept.getMessage());
            } // try Verbindung zur Datenbank über die JDBC-Brücke
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        panel1 = new JPanel();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jComboBoxAdresse = new JComboBox<>();
        jTextFieldBetreff = new JTextField();
        jLabel3 = new JLabel();
        jButtonDrucken = new JButton();
        jButtonSchliessen = new JButton();
        jLabel4 = new JLabel();
        jPanel1 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jTextArea = new JTextArea();
        jTextFieldBezug = new JTextField();
        jLabel5 = new JLabel();
        jCheckBoxAnrede = new JCheckBox();
        jCheckBoxSchlussformel = new JCheckBox();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Carola Hartmann Miles Verlag");
        setMinimumSize(new Dimension(560, 560));
        setResizable(false);
        var contentPane = getContentPane();

        //======== panel1 ========
        {

            //---- jLabel1 ----
            jLabel1.setFont(new Font("Tahoma", Font.BOLD, 12));
            jLabel1.setText("Brief drucken");

            //---- jLabel2 ----
            jLabel2.setText("Adresse");

            //---- jComboBoxAdresse ----
            jComboBoxAdresse.setModel(new DefaultComboBoxModel<>(new String[] {

            }));

            //---- jLabel3 ----
            jLabel3.setText("Betreffzeile");

            //---- jButtonDrucken ----
            jButtonDrucken.setText("Drucken");
            jButtonDrucken.addActionListener(e -> jButtonDruckenActionPerformed(e));

            //---- jButtonSchliessen ----
            jButtonSchliessen.setText("Schlie\u00dfen");
            jButtonSchliessen.addActionListener(e -> jButtonSchliessenActionPerformed(e));

            //---- jLabel4 ----
            jLabel4.setText("Text");

            //======== jPanel1 ========
            {

                //======== jScrollPane1 ========
                {

                    //---- jTextArea ----
                    jTextArea.setColumns(20);
                    jTextArea.setFont(new Font("Arial", Font.PLAIN, 13));
                    jTextArea.setLineWrap(true);
                    jTextArea.setRows(5);
                    jTextArea.setWrapStyleWord(true);
                    jScrollPane1.setViewportView(jTextArea);
                }

                GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
                jPanel1.setLayout(jPanel1Layout);
                jPanel1Layout.setHorizontalGroup(
                    jPanel1Layout.createParallelGroup()
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                );
                jPanel1Layout.setVerticalGroup(
                    jPanel1Layout.createParallelGroup()
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                );
            }

            //---- jLabel5 ----
            jLabel5.setText("Bezugzeile");

            //---- jCheckBoxAnrede ----
            jCheckBoxAnrede.setText("Anrede ");

            //---- jCheckBoxSchlussformel ----
            jCheckBoxSchlussformel.setText("Schlussformel");

            GroupLayout panel1Layout = new GroupLayout(panel1);
            panel1.setLayout(panel1Layout);
            panel1Layout.setHorizontalGroup(
                panel1Layout.createParallelGroup()
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel1Layout.createParallelGroup()
                            .addComponent(jCheckBoxSchlussformel)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jComboBoxAdresse, GroupLayout.PREFERRED_SIZE, 530, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jTextFieldBetreff, GroupLayout.PREFERRED_SIZE, 530, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jTextFieldBezug, GroupLayout.PREFERRED_SIZE, 530, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxAnrede)
                            .addComponent(jLabel4)
                            .addGroup(panel1Layout.createSequentialGroup()
                                .addComponent(jButtonDrucken)
                                .addGap(19, 19, 19)
                                .addComponent(jButtonSchliessen))
                            .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(19, Short.MAX_VALUE))
            );
            panel1Layout.setVerticalGroup(
                panel1Layout.createParallelGroup()
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(15, 15, 15)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(jComboBoxAdresse, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6)
                        .addComponent(jTextFieldBetreff, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5)
                        .addGap(6, 6, 6)
                        .addComponent(jTextFieldBezug, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jCheckBoxAnrede)
                        .addGap(17, 17, 17)
                        .addComponent(jLabel4)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxSchlussformel)
                        .addGap(19, 19, 19)
                        .addGroup(panel1Layout.createParallelGroup()
                            .addComponent(jButtonDrucken)
                            .addComponent(jButtonSchliessen))
                        .addContainerGap(14, Short.MAX_VALUE))
            );
        }

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addComponent(panel1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addComponent(panel1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSchliessenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSchliessenActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonSchliessenActionPerformed

    private void jButtonDruckenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDruckenActionPerformed
        // TODO add your handling code here:
        String Adresse[] = jComboBoxAdresse.getItemAt(jComboBoxAdresse.getSelectedIndex()).split(",");

        if (Adresse[0].equals("0")) {
            Modulhelferlein.Infomeldung("Sie haben keine Adresse gewählt!");
        } else {
            try {
                resultK = SQLAnfrageK.executeQuery("SELECT * FROM TBL_ADRESSE "
                        + "WHERE ADRESSEN_ID = '" + Adresse[0] + "'");
                resultK.next();

                PDDocument document = new PDDocument();
                PDPage page = new PDPage(A4);
                document.addPage(page);

                // Create a new font object selecting one of the PDF base fonts
                PDFont fontPlain = PDType1Font.HELVETICA;
                PDFont fontBold = PDType1Font.HELVETICA_BOLD;
                PDFont fontItalic = PDType1Font.HELVETICA_OBLIQUE;

                // Start a new content stream which will "hold" the to be created content
                PDPageContentStream cos = new PDPageContentStream(document, page);

// Kopfzeile mit Bild
                try {
                    BufferedImage awtImage = ImageIO.read(new File("header-brief.jpg"));
                    //PDImageXObject  ximage = new PDPixelMap(document, awtImage);
                    PDImageXObject pdImage = PDImageXObject.createFromFile("header-brief.jpg", document);
                    float scaley = 0.5f; // alter this value to set the image size
                    float scalex = 0.75f; // alter this value to set the image size
                    cos.drawImage(pdImage, 55, 770, pdImage.getWidth() * scalex, pdImage.getHeight() * scaley);
                    //cos.drawXObject(pdImage, 55, 770, pdImage.getWidth() * scalex, pdImage.getHeight() * scaley);
                } catch (FileNotFoundException fnfex) {
                    Modulhelferlein.Fehlermeldung("Brief Rezension", "File not found-Exception", "Keine Bild-Datei gefunden " + fnfex.getMessage());
                    System.out.println("No image for you");
                }

// Fu?zeile
                Ausgabe(cos, fontBold, 10, Color.GRAY, 55, 35, "Carola Hartmann Miles - Verlag");
                Ausgabe(cos, fontBold, 9, Color.GRAY, 55, 25, "Dipl.Kff. Carola Hartmann");
                Ausgabe(cos, fontBold, 9, Color.GRAY, 55, 15, "Steuernr.: 19 332 6006 5");
                Ausgabe(cos, fontBold, 9, Color.GRAY, 55, 5, "USt-IDNr: DE 269 369 280");

                Ausgabe(cos, fontBold, 10, Color.GRAY, 230, 35, Modulhelferlein.CheckStr("George Caylay Straße 38"));
                Ausgabe(cos, fontBold, 9, Color.GRAY, 230, 25, "Telefon: +49 (0)30 36 28 86 77");
                Ausgabe(cos, fontBold, 9, Color.GRAY, 230, 15, "e-Mail: miles-verlag@t-online.de");
                Ausgabe(cos, fontBold, 9, Color.GRAY, 230, 5, "Internet: www.miles-verlag.jimdo.de");

                Ausgabe(cos, fontBold, 10, Color.GRAY, 400, 35, "14089 Berlin");
                Ausgabe(cos, fontBold, 9, Color.GRAY, 400, 25, "Volksbank Berlin");
                Ausgabe(cos, fontBold, 9, Color.GRAY, 400, 15, "IBAN: DE61 1009 0000 2233 8320 17");
                Ausgabe(cos, fontBold, 9, Color.GRAY, 400, 5, "BIC: BEV0DEBB");

// Faltmarke, Lochmarke, Faltmarke
                Linie(cos, 1, 0, 595, 15, 595);
                Linie(cos, 1, 0, 415, 25, 415);
                Linie(cos, 1, 0, 285, 15, 285);

// Absenderzeile
                Linie(cos, 1, 50, 749, 297, 749);
                Ausgabe(cos, fontPlain, 8, Color.BLACK, 50, 751, Modulhelferlein.CheckStr("C. Hartmann Miles-Verlag - George Cayley Straße 38 - 14089 Berlin"));

// Datum
                Ausgabe(cos, fontPlain, 12, Color.BLACK, 354, 655, "Datum: " + Modulhelferlein.printSimpleDateFormat("dd.MM.yyyy"));

// Adresse
                String[] AdressZeile = {"", "", "", "", "", "", ""};
                String[] args = {"", "", "", "", "", "", ""};
                args[0] = resultK.getString("ADRESSEN_ZUSATZ_1");
                args[1] = Modulhelferlein.makeAnrede(resultK.getString("ADRESSEN_NAMENSZUSATZ"),
                        resultK.getString("ADRESSEN_VORNAME"),
                        resultK.getString("ADRESSEN_NAME"));
                args[2] = resultK.getString("ADRESSEN_ZUSATZ_2");
                args[3] = resultK.getString("ADRESSEN_STRASSE");
                args[4] = resultK.getString("ADRESSEN_PLZ") + " " + resultK.getString("ADRESSEN_ORT");
                args[5] = resultK.getString("ADRESSEN_ZUSATZ_3");

                Integer ZeilenNr = 1;
                for (int i = 0; i < 6; i++) {
                    if (!args[i].equals("")) {
                        AdressZeile[ZeilenNr] = args[i];
                        ZeilenNr = ZeilenNr + 1;
                    }
                }
                Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, 730, AdressZeile[1]);
                Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, 715, AdressZeile[2]);
                Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, 700, AdressZeile[3]);
                Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, 685, AdressZeile[4]);
                Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, 670, AdressZeile[5]);
                Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, 655, AdressZeile[6]);

// Dateiname
                String outputFileName = Modulhelferlein.pathBerichte + "/"
                        + Modulhelferlein.printSimpleDateFormat("yyyyMMdd")
                        + "-"
                        + "Brief"
                        + "-"
                        + resultK.getString("ADRESSEN_NAME")
                        + ".pdf";

// Betreff
                Ausgabe(cos, fontBold, 12, Color.BLACK, 55, 575, jTextFieldBetreff.getText());

// Bezug
                Ausgabe(cos, fontBold, 12, Color.BLACK, 55, 555, jTextFieldBezug.getText());

// Anrede
                if (jCheckBoxAnrede.isSelected()) {
                    Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, 515, Modulhelferlein.makeAnrede(resultK.getString("ADRESSEN_ANREDE"), resultK.getString("ADRESSEN_NAMENSZUSATZ"), resultK.getString("ADRESSEN_NAME")) + ",");
                }

// Text
                String Beschreibung = jTextArea.getText() + " ENDE ENDE";
                String[] splitBeschreibung = Beschreibung.split(" ");
                Integer woerter = splitBeschreibung.length;
                ZeilenNr = 1;
                Integer Startzeile = 485;
                //helferlein.Infomeldung("woerter - 1", splitBeschreibung[woerter-1]);
                splitBeschreibung[woerter - 1] = ""; //ENDE
                woerter = woerter - 2;
                String zeile = "";
                Integer i = 0;
                Integer laenge = 0;
                while (i < woerter - 1) {
                    if (splitBeschreibung[i].equals("[CRLF]")) {
                        zeile = "";
                        laenge = 500;
                    } else {
                        zeile = splitBeschreibung[i];
                        laenge = Modulhelferlein.float2Int(fontPlain.getStringWidth(zeile + " " + splitBeschreibung[i + 1]) / 1000 * 12);
                    }

                    while ((laenge < 490) && (zeile.length() < 90) && (i < woerter - 1)) {
                        if (splitBeschreibung[i + 1].equals("[CRLF]")) {
                            i = i + 1;
                            laenge = 500;
                        } else {
                            zeile = zeile + " " + splitBeschreibung[i + 1];
                            i = i + 1;
                            laenge = Modulhelferlein.float2Int(fontPlain.getStringWidth(zeile + " " + splitBeschreibung[i + 1]) / 1000 * 12);
                        }
                    }
                    //helferlein.Infomeldung(Float.toString(laenge) + " => " + zeile);                                
                    Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, Startzeile - 15 * (ZeilenNr - 1), zeile);
                    i = i + 1;
                    ZeilenNr = ZeilenNr + 1;
                }

// Schlussformel
                if (jCheckBoxSchlussformel.isSelected()) {
                    Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, Startzeile - 15 * (ZeilenNr + 5), Modulhelferlein.CheckStr("Mit freundlichen Grüßen"));
                    Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, Startzeile - 15 * (ZeilenNr + 9), "Carola Hartmann");
                    Ausgabe(cos, fontPlain, 12, Color.BLACK, 55, Startzeile - 15 * (ZeilenNr + 10), "Diplom Kauffrau");
                }

// Make sure that the content stream is closed:
//helferlein.Infomeldung(outputFileName);                    
                cos.close();
                document.save(outputFileName);
                document.close();

                Runtime.getRuntime().exec("cmd.exe /c " + "\"" + outputFileName + "\""); // try Brief ausgeben

                String[] argumente = {AdressZeile[1], AdressZeile[2], AdressZeile[3], AdressZeile[4], AdressZeile[5], AdressZeile[6]};
                _DlgAdresseDrucken.main(argumente);

            } catch (IOException ex) {
                Modulhelferlein.Fehlermeldung("IO-Exception: " + ex.getMessage());
            } catch (SQLException ex) {
                Modulhelferlein.Fehlermeldung("SQL-Exception: " + ex.getMessage());
            }
            // Adressetikett drucken
        }//GEN-LAST:event_jButtonDruckenActionPerformed
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //try {
        //    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        //        if ("Nimbus".equals(info.getName())) {
        //           javax.swing.UIManager.setLookAndFeel(info.getClassName());
        //            break;
        //        }
        //    }
        //} catch (ClassNotFoundException ex) {
        //    java.util.logging.Logger.getLogger(_DlgBrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        //} catch (InstantiationException ex) {
        //    java.util.logging.Logger.getLogger(_DlgBrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        //} catch (IllegalAccessException ex) {
        //    java.util.logging.Logger.getLogger(_DlgBrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        //} catch (javax.swing.UnsupportedLookAndFeelException ex) {
        //    java.util.logging.Logger.getLogger(_DlgBrief.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        //}
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            _DlgBrief dialog = new _DlgBrief(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    dialog.setVisible(false);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel panel1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JComboBox<String> jComboBoxAdresse;
    private JTextField jTextFieldBetreff;
    private JLabel jLabel3;
    private JButton jButtonDrucken;
    private JButton jButtonSchliessen;
    private JLabel jLabel4;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JTextArea jTextArea;
    private JTextField jTextFieldBezug;
    private JLabel jLabel5;
    private JCheckBox jCheckBoxAnrede;
    private JCheckBox jCheckBoxSchlussformel;
    // End of variables declaration//GEN-END:variables

    private Connection conn;
    private Statement SQLAnfrageK;
    private ResultSet resultK;

}
