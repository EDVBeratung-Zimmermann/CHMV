/*
 * Copyright (C) 2017 thoma
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package milesVerlagMain;

import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.*;
import javax.swing.GroupLayout;
import net.miginfocom.swing.*;

/**
 *
 * @author thoma
 */
public class _DlgRezensionen extends javax.swing.JDialog {

    /**
     * Creates new form _DlgRezensionen
     *
     * @param parent
     * @param modal
     */
    public _DlgRezensionen(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        btnGroupFormat.add(rbPDF);
        btnGroupFormat.add(rbDOC);
        btnGroupFormat.add(rbXLS);
        btnGroupSortierung.add(rbBuch);
        btnGroupSortierung.add(rbZeitschrift);
        btnGroupSortierung.add(rbRezensent);

        Connection conn = null;

// Auswahlliste für Bücher erstellen
        try { // Datenbank-Treiber laden
            Class.forName(ModulHelferlein.dbDriver);
        } catch (ClassNotFoundException exept) {
            ModulHelferlein.Fehlermeldung("Rezensionen versenden", "Treiber nicht gefunden: ", exept.getMessage());
            System.exit(1);
        } // Datenbank-Treiber laden

        try { // Verbindung zur Datenbank über die JDBC-Brücke
            conn = DriverManager.getConnection(ModulHelferlein.dbUrl, ModulHelferlein.dbUser, ModulHelferlein.dbPassword);
        } catch (SQLException exept) {
            ModulHelferlein.Fehlermeldung("Rezensionen versenden", "Verbindung nicht moeglich: ", exept.getMessage());
            System.exit(1);
        } // try Verbindung zur Datenbank über die JDBC-Brücke

        if (conn != null) {
            try {
                String eintrag = "";
                ResultSet resultBuch = null;

                Statement SQLAnfrageBuch = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);;

                field_ISBN.addItem("000, --------------, --------------------------------");
                resultBuch = SQLAnfrageBuch.executeQuery("SELECT * FROM TBL_BUCH ORDER BY BUCH_ISBN"); // schickt SQL an DB und erzeugt ergebnis -> wird in result gespeichert
                while (resultBuch.next()) {
                    eintrag = "";
                    if (resultBuch.getInt("BUCH_ID") < 10) {
                        eintrag = "00" + Integer.toString(resultBuch.getInt("BUCH_ID"));
                    } else if (resultBuch.getInt("BUCH_ID") < 100) {
                        eintrag = "0" + Integer.toString(resultBuch.getInt("BUCH_ID"));
                    } else {
                        eintrag = Integer.toString(resultBuch.getInt("BUCH_ID"));
                    }
                    eintrag = eintrag + ", "
                            + resultBuch.getString("BUCH_ISBN") + ", "
                            + resultBuch.getString("BUCH_TITEL");
                    field_ISBN.addItem(eintrag);
                } // while
            } catch (SQLException ex) {
                ModulHelferlein.Fehlermeldung("Auswalliste für Bücher erzeugen", "SQL-Exception", ex.getMessage());
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        panel1 = new JPanel();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        rbZeitschrift = new JRadioButton();
        rbPDF = new JRadioButton();
        rbRezensent = new JRadioButton();
        rbDOC = new JRadioButton();
        rbBuch = new JRadioButton();
        rbXLS = new JRadioButton();
        field_ISBN = new JComboBox<>();
        jButton1 = new JButton();
        jButton2 = new JButton();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Carola Hartmann Miles Verlag");
        setResizable(false);
        setFont(new Font(Font.DIALOG, Font.BOLD, 12));
        var contentPane = getContentPane();
        contentPane.setLayout(null);

        //======== panel1 ========
        {
            panel1.setLayout(null);

            //---- jLabel1 ----
            jLabel1.setFont(new Font("Tahoma", Font.BOLD, 12));
            jLabel1.setText("Rezensionen");
            panel1.add(jLabel1);
            jLabel1.setBounds(new Rectangle(new Point(0, 0), jLabel1.getPreferredSize()));

            //---- jLabel2 ----
            jLabel2.setText("Umfang/Sortierung");
            jLabel2.setFont(new Font("Tahoma", Font.BOLD, 11));
            panel1.add(jLabel2);
            jLabel2.setBounds(new Rectangle(new Point(0, 45), jLabel2.getPreferredSize()));

            //---- jLabel3 ----
            jLabel3.setText("Ausgabeformat");
            jLabel3.setFont(new Font("Tahoma", Font.BOLD, 11));
            panel1.add(jLabel3);
            jLabel3.setBounds(new Rectangle(new Point(217, 45), jLabel3.getPreferredSize()));

            //---- rbZeitschrift ----
            rbZeitschrift.setText("nach Zeitschrift");
            panel1.add(rbZeitschrift);
            rbZeitschrift.setBounds(0, 64, 109, rbZeitschrift.getPreferredSize().height);

            //---- rbPDF ----
            rbPDF.setText("PDF");
            rbPDF.setEnabled(false);
            panel1.add(rbPDF);
            rbPDF.setBounds(217, 64, 85, rbPDF.getPreferredSize().height);

            //---- rbRezensent ----
            rbRezensent.setText("nach Rezensent");
            panel1.add(rbRezensent);
            rbRezensent.setBounds(0, 92, 109, rbRezensent.getPreferredSize().height);

            //---- rbDOC ----
            rbDOC.setText("DOC");
            rbDOC.setEnabled(false);
            panel1.add(rbDOC);
            rbDOC.setBounds(217, 92, 85, rbDOC.getPreferredSize().height);

            //---- rbBuch ----
            rbBuch.setSelected(true);
            rbBuch.setText("nach Buch");
            panel1.add(rbBuch);
            rbBuch.setBounds(0, 120, 76, rbBuch.getPreferredSize().height);

            //---- rbXLS ----
            rbXLS.setText("XLS");
            rbXLS.setSelected(true);
            panel1.add(rbXLS);
            rbXLS.setBounds(217, 120, 85, rbXLS.getPreferredSize().height);

            //---- field_ISBN ----
            field_ISBN.setModel(new DefaultComboBoxModel<>(new String[] {

            }));
            panel1.add(field_ISBN);
            field_ISBN.setBounds(0, 148, 302, field_ISBN.getPreferredSize().height);

            //---- jButton1 ----
            jButton1.setText("Drucken");
            jButton1.addActionListener(e -> jButton1ActionPerformed(e));
            panel1.add(jButton1);
            jButton1.setBounds(85, 200, 100, jButton1.getPreferredSize().height);

            //---- jButton2 ----
            jButton2.setText("Schlie\u00dfen");
            jButton2.addActionListener(e -> jButton2ActionPerformed(e));
            panel1.add(jButton2);
            jButton2.setBounds(200, 200, 102, jButton2.getPreferredSize().height);

            { // compute preferred size
                Dimension preferredSize = new Dimension();
                for(int i = 0; i < panel1.getComponentCount(); i++) {
                    Rectangle bounds = panel1.getComponent(i).getBounds();
                    preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);
                    preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);
                }
                Insets insets = panel1.getInsets();
                preferredSize.width += insets.right;
                preferredSize.height += insets.bottom;
                panel1.setMinimumSize(preferredSize);
                panel1.setPreferredSize(preferredSize);
            }
        }
        contentPane.add(panel1);
        panel1.setBounds(10, 5, 320, panel1.getPreferredSize().height);

        { // compute preferred size
            Dimension preferredSize = new Dimension();
            for(int i = 0; i < contentPane.getComponentCount(); i++) {
                Rectangle bounds = contentPane.getComponent(i).getBounds();
                preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);
                preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);
            }
            Insets insets = contentPane.getInsets();
            preferredSize.width += insets.right;
            preferredSize.height += insets.bottom;
            contentPane.setMinimumSize(preferredSize);
            contentPane.setPreferredSize(preferredSize);
        }
        setSize(350, 275);
        setLocationRelativeTo(getOwner());

        //---- btnGroupSortierung ----
        var btnGroupSortierung = new ButtonGroup();
        btnGroupSortierung.add(rbZeitschrift);
        btnGroupSortierung.add(rbRezensent);
        btnGroupSortierung.add(rbBuch);

        //---- btnGroupFormat ----
        var btnGroupFormat = new ButtonGroup();
        btnGroupFormat.add(rbPDF);
        btnGroupFormat.add(rbDOC);
        btnGroupFormat.add(rbXLS);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String buch[] = field_ISBN.getItemAt(field_ISBN.getSelectedIndex()).split(",");
        if (rbPDF.isSelected()) {
            if (rbBuch.isSelected()) {
                System.out.println("... Drucke PDF-Bericht für Buch-ID " + buch[0]);
                berRezensionen.bericht("Buch", "PDF", buch[0]);
            } else {
                if (rbZeitschrift.isSelected()) {
                    berRezensionen.bericht("Zeitschrift", "PDF", buch[0]);
                } else {
                    berRezensionen.bericht("Rezensnt", "PDF", buch[0]);
                }
            }
        } else {
            if (rbXLS.isSelected()) {
                if (rbBuch.isSelected()) {
                    berRezensionen.bericht("Buch", "XLS", buch[0]);
                } else {
                    if (rbZeitschrift.isSelected()) {
                        berRezensionen.bericht("Zeitschrift", "XLS", buch[0]);
                    } else {
                        berRezensionen.bericht("Rezensnt", "XLS", buch[0]);
                    }
                }
            } else {
                if (rbBuch.isSelected()) {
                    berRezensionen.bericht("Buch", "DOC", buch[0]);
                } else {
                    if (rbZeitschrift.isSelected()) {
                        berRezensionen.bericht("Zeitschrift", "DOC", buch[0]);
                    } else {
                        berRezensionen.bericht("Rezensnt", "DOC", buch[0]);
                    }
                }
            }
        }
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /**
         * try { for (javax.swing.UIManager.LookAndFeelInfo info :
         * javax.swing.UIManager.getInstalledLookAndFeels()) { if
         * ("Nimbus".equals(info.getName())) {
         * javax.swing.UIManager.setLookAndFeel(info.getClassName()); break; } }
         * } catch (ClassNotFoundException | InstantiationException |
         * IllegalAccessException | javax.swing.UnsupportedLookAndFeelException
         * ex) {
         * java.util.logging.Logger.getLogger(CarolaHartmannMilesVerlag.class.getName()).log(java.util.logging.Level.SEVERE,
         * null, ex); }
         */
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            _DlgRezensionen dialog = new _DlgRezensionen(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    dialog.dispose();
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel panel1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JRadioButton rbZeitschrift;
    private JRadioButton rbPDF;
    private JRadioButton rbRezensent;
    private JRadioButton rbDOC;
    private JRadioButton rbBuch;
    private JRadioButton rbXLS;
    private JComboBox<String> field_ISBN;
    private JButton jButton1;
    private JButton jButton2;
    // End of variables declaration//GEN-END:variables

    private ButtonGroup btnGroupFormat = new ButtonGroup();
    private ButtonGroup btnGroupSortierung = new ButtonGroup();

}
