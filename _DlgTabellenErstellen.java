/*
 *
 * Das JAVA-Programm Miles-Verlag Verlagsverwaltung stellt alle notwendigen
 * Funktionen für die Verwaltung des Carola Hartman Miles-Verlags bereit.
 *
 * Copyright (C) 2017 EDV-Beratung und Betrieb, Entwicklung von SOftware
 *                    Dipl.Inform Thomas Zimmermann
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
package milesVerlagMain;

import java.awt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.JOptionPane;

/**
 *
 * @author Thomas Zimmermann
 */
public class _DlgTabellenErstellen extends javax.swing.JDialog {

    /**
     * Creates new form _DlgTabellenErstellen
     *
     * @param parent
     * @param modal
     */
    public _DlgTabellenErstellen(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        try {
            Class.forName(Modulhelferlein.dbDriver);
        } catch (ClassNotFoundException exept) {
            Modulhelferlein.Fehlermeldung("Tabellen erstellen",
                    "ClassNotFoundException: Treiber nicht gefunden: "
                    , exept.getMessage());
        }

        // Verbindung zur Datenbank über die JDBC-Brücke
        try {
            conn = DriverManager.getConnection(Modulhelferlein.dbUrl, Modulhelferlein.dbUser, Modulhelferlein.dbPassword);
        } catch (SQLException exept) {
            Modulhelferlein.Fehlermeldung("Tabellen erstellen",
                    "SQL-Excetion: Verbindung nicht moeglich: "
                    , exept.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        panel1 = new JPanel();
        jLabel4 = new JLabel();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jCheckBox2 = new JCheckBox();
        jCheckBox6 = new JCheckBox();
        jCheckBox10 = new JCheckBox();
        jCheckBox1 = new JCheckBox();
        jCheckBox5 = new JCheckBox();
        jCheckBox11 = new JCheckBox();
        jCheckBox3 = new JCheckBox();
        jCheckBox7 = new JCheckBox();
        jCheckBox12 = new JCheckBox();
        jCheckBox4 = new JCheckBox();
        jCheckBox8 = new JCheckBox();
        jCheckBox13 = new JCheckBox();
        jCheckBox15 = new JCheckBox();
        jCheckBox16 = new JCheckBox();
        jCheckBox14 = new JCheckBox();
        jCheckBox17 = new JCheckBox();
        jCheckBox9 = new JCheckBox();
        jCheckBox18 = new JCheckBox();
        jCheckBox19 = new JCheckBox();
        jButtonEnde = new JButton();
        jButtonSchliessen = new JButton();
        jCheckBox20 = new JCheckBox();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Carola Hartmann Miles Verlag");
        setResizable(false);
        setFont(new Font("Dialog", Font.BOLD, 12));
        setMinimumSize(new Dimension(560, 400));
        Container contentPane = getContentPane();

        //======== panel1 ========
        {
            panel1.setMinimumSize(new Dimension(560, 400));
            panel1.setLayout(null);

            //---- jLabel4 ----
            jLabel4.setFont(new Font("Tahoma", Font.BOLD, 12));
            jLabel4.setText("Erstellen von Tabellen");
            panel1.add(jLabel4);
            jLabel4.setBounds(new Rectangle(new Point(0, 0), jLabel4.getPreferredSize()));

            //---- jLabel1 ----
            jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | Font.BOLD));
            jLabel1.setText("Stammdaten");
            jLabel1.setToolTipText("");
            panel1.add(jLabel1);
            jLabel1.setBounds(0, 45, 133, jLabel1.getPreferredSize().height);

            //---- jLabel2 ----
            jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() | Font.BOLD));
            jLabel2.setText("Bewegungsdaten");
            jLabel2.setToolTipText("");
            panel1.add(jLabel2);
            jLabel2.setBounds(138, 45, 183, jLabel2.getPreferredSize().height);

            //---- jLabel3 ----
            jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getStyle() | Font.BOLD));
            jLabel3.setText("Sonstige Daten");
            jLabel3.setToolTipText("");
            panel1.add(jLabel3);
            jLabel3.setBounds(326, 45, 159, jLabel3.getPreferredSize().height);

            //---- jCheckBox2 ----
            jCheckBox2.setText("Buchprojekte");
            panel1.add(jCheckBox2);
            jCheckBox2.setBounds(0, 64, 133, jCheckBox2.getPreferredSize().height);

            //---- jCheckBox6 ----
            jCheckBox6.setText("Einnahmen");
            panel1.add(jCheckBox6);
            jCheckBox6.setBounds(138, 64, 183, jCheckBox6.getPreferredSize().height);

            //---- jCheckBox10 ----
            jCheckBox10.setText("Konfiguration");
            panel1.add(jCheckBox10);
            jCheckBox10.setBounds(326, 64, 159, jCheckBox10.getPreferredSize().height);

            //---- jCheckBox1 ----
            jCheckBox1.setText("Adressen");
            panel1.add(jCheckBox1);
            jCheckBox1.setBounds(0, 92, 133, jCheckBox1.getPreferredSize().height);

            //---- jCheckBox5 ----
            jCheckBox5.setText("Ausgaben");
            panel1.add(jCheckBox5);
            jCheckBox5.setBounds(138, 92, 183, jCheckBox5.getPreferredSize().height);

            //---- jCheckBox11 ----
            jCheckBox11.setText("Termine");
            panel1.add(jCheckBox11);
            jCheckBox11.setBounds(326, 92, 159, jCheckBox11.getPreferredSize().height);

            //---- jCheckBox3 ----
            jCheckBox3.setText("Mailverteiler");
            panel1.add(jCheckBox3);
            jCheckBox3.setBounds(0, 120, 133, jCheckBox3.getPreferredSize().height);

            //---- jCheckBox7 ----
            jCheckBox7.setText("Bestellungen");
            panel1.add(jCheckBox7);
            jCheckBox7.setBounds(138, 120, 183, jCheckBox7.getPreferredSize().height);

            //---- jCheckBox12 ----
            jCheckBox12.setText("Bestellnummer");
            panel1.add(jCheckBox12);
            jCheckBox12.setBounds(326, 120, 159, jCheckBox12.getPreferredSize().height);

            //---- jCheckBox4 ----
            jCheckBox4.setText("Mailadressen");
            panel1.add(jCheckBox4);
            jCheckBox4.setBounds(0, 148, 133, jCheckBox4.getPreferredSize().height);

            //---- jCheckBox8 ----
            jCheckBox8.setText("Rezensionen ausgehend");
            panel1.add(jCheckBox8);
            jCheckBox8.setBounds(138, 148, 183, jCheckBox8.getPreferredSize().height);

            //---- jCheckBox13 ----
            jCheckBox13.setText("Umsatzsteuervoranmeldung");
            panel1.add(jCheckBox13);
            jCheckBox13.setBounds(new Rectangle(new Point(326, 148), jCheckBox13.getPreferredSize()));

            //---- jCheckBox15 ----
            jCheckBox15.setText("Rezensionen Details ausg...");
            panel1.add(jCheckBox15);
            jCheckBox15.setBounds(138, 176, 182, jCheckBox15.getPreferredSize().height);

            //---- jCheckBox16 ----
            jCheckBox16.setText("Hilfstabelle Buch");
            panel1.add(jCheckBox16);
            jCheckBox16.setBounds(326, 176, 159, jCheckBox16.getPreferredSize().height);

            //---- jCheckBox14 ----
            jCheckBox14.setText("Rezensionen eingehend");
            panel1.add(jCheckBox14);
            jCheckBox14.setBounds(138, 204, 183, jCheckBox14.getPreferredSize().height);

            //---- jCheckBox17 ----
            jCheckBox17.setText("Honorar");
            panel1.add(jCheckBox17);
            jCheckBox17.setBounds(326, 204, 159, jCheckBox17.getPreferredSize().height);

            //---- jCheckBox9 ----
            jCheckBox9.setText("Bestellungdetails");
            panel1.add(jCheckBox9);
            jCheckBox9.setBounds(138, 232, 183, jCheckBox9.getPreferredSize().height);

            //---- jCheckBox18 ----
            jCheckBox18.setText("Aufgaben");
            panel1.add(jCheckBox18);
            jCheckBox18.setBounds(326, 232, 159, jCheckBox18.getPreferredSize().height);

            //---- jCheckBox19 ----
            jCheckBox19.setText("Hilfstabelle Verkauf");
            panel1.add(jCheckBox19);
            jCheckBox19.setBounds(326, 260, 159, jCheckBox19.getPreferredSize().height);

            //---- jButtonEnde ----
            jButtonEnde.setText("Erstellen");
            jButtonEnde.addActionListener(e -> jButtonEndeActionPerformed(e));
            panel1.add(jButtonEnde);
            jButtonEnde.setBounds(135, 335, 183, jButtonEnde.getPreferredSize().height);

            //---- jButtonSchliessen ----
            jButtonSchliessen.setText("Schlie\u00dfen");
            jButtonSchliessen.addActionListener(e -> jButtonSchliessenActionPerformed(e));
            panel1.add(jButtonSchliessen);
            jButtonSchliessen.setBounds(325, 335, 159, jButtonSchliessen.getPreferredSize().height);

            //---- jCheckBox20 ----
            jCheckBox20.setText("Benutzer");
            panel1.add(jCheckBox20);
            jCheckBox20.setBounds(new Rectangle(new Point(326, 288), jCheckBox20.getPreferredSize()));

            { // compute preferred size
                Dimension preferredSize = new Dimension();
                for(int i = 0; i < panel1.getComponentCount(); i++) {
                    Rectangle bounds = panel1.getComponent(i).getBounds();
                    preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);
                    preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);
                }
                Insets insets = panel1.getInsets();
                preferredSize.width += insets.right;
                preferredSize.height += insets.bottom;
                panel1.setMinimumSize(preferredSize);
                panel1.setPreferredSize(preferredSize);
            }
        }

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(13, Short.MAX_VALUE))
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panel1, GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addContainerGap())
        );
        setSize(510, 415);
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEndeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEndeActionPerformed
        // TODO add your handling code here:
        if (conn != null) {
            try {
                SQLAnfrage = conn.createStatement();
            } catch (SQLException ex) {
                Modulhelferlein.Fehlermeldung("Tabellen erstellen","SQL-Exception",ex.getMessage());
            }
            if (JOptionPane.showConfirmDialog(null,
                    "Sollen die Tabellen wirklich erstellt werden?",
                    "Bestätigung",
                    JOptionPane.YES_NO_OPTION) == 0) {
                try {
                    SQL = "CREATE TABLE ";
                    if (jCheckBox13.isSelected()) {
                        SQL = SQL + "TBL_USTVA ( ";
                        SQL = SQL + "USTVA_ID INT PRIMARY KEY,";
                        SQL = SQL + "USTVA_GESENDET BOOLEAN,";
                        SQL = SQL + "USTVA_DATUM DATE,";
                        SQL = SQL + "USTVA_ZEITRAUM INT,";
                        SQL = SQL + "USTVA_KZ09 INT,";
                        SQL = SQL + "USTVA_KZ10 BOOLEAN,";
                        SQL = SQL + "USTVA_KZ22 BOOLEAN,";
                        SQL = SQL + "USTVA_KZ26 BOOLEAN,";
                        SQL = SQL + "USTVA_KZ29 BOOLEAN,";
                        SQL = SQL + "USTVA_KZ35 INT,";
                        SQL = SQL + "USTVA_KZ36 FLOAT,";
                        SQL = SQL + "USTVA_KZ39 FLOAT,";
                        SQL = SQL + "USTVA_KZ42 INT,";
                        SQL = SQL + "USTVA_KZ43 INT,";
                        SQL = SQL + "USTVA_KZ44 INT,";
                        SQL = SQL + "USTVA_KZ45 INT,";
                        SQL = SQL + "USTVA_KZ46 INT,";
                        SQL = SQL + "USTVA_KZ47 FLOAT,";
                        SQL = SQL + "USTVA_KZ48 INT,";
                        SQL = SQL + "USTVA_KZ49 INT,";
                        SQL = SQL + "USTVA_KZ52 INT,";
                        SQL = SQL + "USTVA_KZ53 FLOAT,";
                        SQL = SQL + "USTVA_KZ59 FLOAT,";
                        SQL = SQL + "USTVA_KZ60 INT,";
                        SQL = SQL + "USTVA_KZ61 FLOAT,";
                        SQL = SQL + "USTVA_KZ62 FLOAT,";
                        SQL = SQL + "USTVA_KZ63 FLOAT,";
                        SQL = SQL + "USTVA_KZ64 FLOAT,";
                        SQL = SQL + "USTVA_KZ65 FLOAT,";
                        SQL = SQL + "USTVA_KZ66 FLOAT,";
                        SQL = SQL + "USTVA_KZ67 FLOAT,";
                        SQL = SQL + "USTVA_KZ68 INT,";
                        SQL = SQL + "USTVA_KZ69 FLOAT,";
                        SQL = SQL + "USTVA_KZ73 INT,";
                        SQL = SQL + "USTVA_KZ74 FLOAT,";
                        SQL = SQL + "USTVA_KZ76 INT,";
                        SQL = SQL + "USTVA_KZ77 INT,";
                        SQL = SQL + "USTVA_KZ78 INT,";
                        SQL = SQL + "USTVA_KZ79 FLOAT,";
                        SQL = SQL + "USTVA_KZ80 FLOAT,";
                        SQL = SQL + "USTVA_KZ81 INT,";
                        SQL = SQL + "USTVA_KZ83 FLOAT,";
                        SQL = SQL + "USTVA_KZ84 INT,";
                        SQL = SQL + "USTVA_KZ85 FLOAT,";
                        SQL = SQL + "USTVA_KZ86 INT,";
                        SQL = SQL + "USTVA_KZ89 INT,";
                        SQL = SQL + "USTVA_KZ91 INT,";
                        SQL = SQL + "USTVA_KZ93 INT,";
                        SQL = SQL + "USTVA_KZ94 INT,";
                        SQL = SQL + "USTVA_KZ95 INT,";
                        SQL = SQL + "USTVA_KZ96 FLOAT,";
                        SQL = SQL + "USTVA_KZ98 FLOAT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle USTVA wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox5.isSelected()) {
                        SQL = SQL + "TBL_AUSGABEN ( ";
                        SQL = SQL + "AUSGABEN_ID INT PRIMARY KEY,";
                        SQL = SQL + "AUSGABEN_TYP INT,";
                        SQL = SQL + "AUSGABEN_RECHNNR TEXT,";
                        SQL = SQL + "AUSGABEN_RECHDATUM DATE,";
                        SQL = SQL + "AUSGABEN_BEZAHLT DATE,";
                        SQL = SQL + "AUSGABEN_KOSTEN FLOAT,";
                        SQL = SQL + "AUSGABEN_USTR INT,";
                        SQL = SQL + "AUSGABEN_BESCHREIBUNG TEXT,";
                        SQL = SQL + "AUSGABEN_LIEFERANT TEXT";
                        SQL = SQL + "AUSGABEN_LINK TEXT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle AUSGABEN wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox6.isSelected()) {
                        SQL = SQL + "TBL_EINNAHMEN ( ";
                        SQL = SQL + "EINNAHMEN_ID INT PRIMARY KEY,";
                        SQL = SQL + "EINNAHMEN_TYP INT,";
                        SQL = SQL + "EINNAHMEN_RECHNNR TEXT,";
                        SQL = SQL + "EINNAHMEN_RECHDATUM DATE,";
                        SQL = SQL + "EINNAHMEN_BEZAHLT DATE,";
                        SQL = SQL + "EINNAHMEN_KOSTEN FLOAT,";
                        SQL = SQL + "EINNAHMEN_USTR INT,";
                        SQL = SQL + "EINNAHMEN_BESCHREIBUNG TEXT,";
                        SQL = SQL + "EINNAHMEN_LIEFERANT TEXT";
                        SQL = SQL + "EINNAHMEN_LINK TEXT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle EINNAHMEN wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox7.isSelected()) {
                        SQL = SQL + "TBL_BESTELLUNG ( ";
                        SQL = SQL + "BESTELLUNG_ID INT PRIMARY KEY, ";
                        SQL = SQL + "BESTELLUNG_DATUM DATE, ";
                        SQL = SQL + "BESTELLUNG_RECHDAT DATE, ";
                        SQL = SQL + "BESTELLUNG_RECHNR TEXT, ";
                        SQL = SQL + "BESTELLUNG_KUNDE INT, ";
                        SQL = SQL + "BESTELLUNG_TYP INT, ";
                        SQL = SQL + "BESTELLUNG_ZAHLUNGSZIEL INT,";
                        SQL = SQL + "BESTELLUNG_BESTNR TEXT, ";
                        SQL = SQL + "BESTELLUNG_ZEILE_1 TEXT, ";
                        SQL = SQL + "BESTELLUNG_ZEILE_2 TEXT, ";
                        SQL = SQL + "BESTELLUNG_ZEILE_3 TEXT, ";
                        SQL = SQL + "BESTELLUNG_ZEILE_4 TEXT, ";
                        SQL = SQL + "BESTELLUNG_ZEILE_5 TEXT, ";
                        SQL = SQL + "BESTELLUNG_ZEILE_6 TEXT, ";
                        SQL = SQL + "BESTELLUNG_USTR_ID TEXT, ";
                        SQL = SQL + "BESTELLUNG_TEXT TEXT, ";
                        SQL = SQL + "BESTELLUNG_VERSAND FLOAT, ";
                        SQL = SQL + "BESTELLUNG_LAND INT, ";
                        SQL = SQL + "BESTELLUNG_PRIVAT BOOLEAN, ";
                        SQL = SQL + "BESTELLUNG_BESTAND BOOLEAN, ";
                        SQL = SQL + "BESTELLUNG_STORNIERT BOOLEAN, ";
                        SQL = SQL + "BESTELLUNG_TB BOOLEAN, ";
                        SQL = SQL + "BESTELLUNG_BEZAHLUNG BOOLEAN, ";
                        SQL = SQL + "BESTELLUNG_BEZAHLT DATE";
                        SQL = SQL + "BESTELLUNG_LINK TEXT";
                        SQL = SQL + "BESTELLUNG_DHL TEXT";
                        SQL = SQL + "BESTELLUNG_EMAIL TEXT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle BESTELLUNG wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox9.isSelected()) {
                        SQL = SQL + "TBL_BESTELLUNG_DETAIL ( ";
                        SQL = SQL + "BESTELLUNG_DETAIL_ID INT PRIMARY KEY, ";
                        SQL = SQL + "BESTELLUNG_DETAIL_RECHNR TEXT, ";
                        SQL = SQL + "BESTELLUNG_DETAIL_DATUM DATE, ";
                        SQL = SQL + "BESTELLUNG_DETAIL_BUCH INT, ";
                        SQL = SQL + "BESTELLUNG_DETAIL_ANZAHL INT, ";
                        SQL = SQL + "BESTELLUNG_DETAIL_RABATT FLOAT, ";
                        SQL = SQL + "BESTELLUNG_DETAIL_SONST BOOELAN, ";
                        SQL = SQL + "BESTELLUNG_DETAIL_SONST_TEXT TEXT, ";
                        SQL = SQL + "BESTELLUNG_DETAIL_SONST_PREIS FLOAT ";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle BESTELLUNG_DETAIL wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox1.isSelected()) {
                        SQL = SQL + "TBL_ADRESSE ( ";
                        SQL = SQL + "ADRESSEN_ID INT PRIMARY KEY,";
                        SQL = SQL + "ADRESSEN_NAME TEXT,";
                        SQL = SQL + "ADRESSEN_POC TEXT,";
                        SQL = SQL + "ADRESSEN_STRASSE TEXT,";
                        SQL = SQL + "ADRESSEN_PLZ TEXT,";
                        SQL = SQL + "ADRESSEN_ORT TEXT,";
                        SQL = SQL + "ADRESSEN_TELEFON TEXT,";
                        SQL = SQL + "ADRESSEN_TELEFAX TEXT,";
                        SQL = SQL + "ADRESSEN_EMAIL TEXT,";
                        SQL = SQL + "ADRESSEN_MOBIL TEXT,";
                        SQL = SQL + "ADRESSEN_ANREDE TEXT,";
                        SQL = SQL + "ADRESSEN_NAMENSZUSATZ TEXT,";
                        SQL = SQL + "ADRESSEN_ZUSATZ_1 TEXT,";
                        SQL = SQL + "ADRESSEN_ZUSATZ_2 TEXT,";
                        SQL = SQL + "ADRESSEN_ZUSATZ_3 TEXT,";
                        SQL = SQL + "ADRESSEN_WEB TEXT,";
                        SQL = SQL + "ADRESSEN_KUNDENNUMMER TEXT,";
                        SQL = SQL + "ADRESSEN_TYP TEXT,";
                        SQL = SQL + "ADRESSEN_KENNWORT TEXT,";
                        SQL = SQL + "ADRESSEN_VORNAME TEXT,";
                        SQL = SQL + "ADRESSEN_ZEITSCHRIFT TEXT,";
                        SQL = SQL + "ADRESSEN_USTR_ID TEXT,";
                        SQL = SQL + "ADRESSEN_ANMELDUNG TEXT";
                        SQL = SQL + "ADRESSEN_IBAN TEXT";
                        SQL = SQL + "ADRESSEN_BIC TEXT";
                        SQL = SQL + "ADRESSEN_SONDERKONDITION BOOLEAN";
                        SQL = SQL + "ADRESSEN_RABATT INT";
                        SQL = SQL + "ADRESSEN_USTR BOOLEAN";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle ADRESSEN wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox2.isSelected()) {
                        SQL = SQL + "TBL_BUCH ( ";
                        SQL = SQL + "BUCH_ID INT PRIMARY KEY,";
                        SQL = SQL + "BUCH_AUTOR TEXT,";
                        SQL = SQL + "BUCH_TITEL TEXT,";
                        SQL = SQL + "BUCH_PREIS FLOAT,";
                        SQL = SQL + "BUCH_EK FLOAT,";
                        SQL = SQL + "BUCH_MARGE FLOAT,";
                        SQL = SQL + "BUCH_ISBN TEXT,";
                        SQL = SQL + "BUCH_SEITEN INT,";
                        SQL = SQL + "BUCH_JAHR TEXT,";
                        SQL = SQL + "BUCH_BESCHREIBUNG TEXT,";
                        SQL = SQL + "BUCH_COVER TEXT,";
                        SQL = SQL + "BUCH_COVER_GROSS TEXT,";
                        SQL = SQL + "BUCH_TEXT TEXT,";
                        SQL = SQL + "BUCH_FLYER TEXT,";
                        SQL = SQL + "BUCH_AUFLAGE INT,";
                        SQL = SQL + "BUCH_AKTIV BOOLEAN,";
                        SQL = SQL + "BUCH_HERAUSGEBER BOOLEAN,";
                        SQL = SQL + "BUCH_HONORAR BOOLEAN,";
                        SQL = SQL + "BUCH_HONORAR_PROZENT INT,";
                        SQL = SQL + "BUCH_HONORAR_ANZAHL INT,";
                        SQL = SQL + "BUCH_HONORAR_2_PROZENT INT,";
                        SQL = SQL + "BUCH_HONORAR_2_ANZAHL INT,";
                        SQL = SQL + "BUCH_DRUCKEREI INT,";
                        SQL = SQL + "BUCH_DRUCKEREINUMMER TEXT,";
                        SQL = SQL + "BUCH_DEUNATBIBL BOOLEAN,";
                        SQL = SQL + "BUCH_BERLLBIBL BOOLEAN,";
                        SQL = SQL + "Buch_GESAMTBETRACTUNG BOOLEAN,";
                        SQL = SQL + "BUCH_BODFIX INT,";
                        SQL = SQL + "BUCH_BODPROZENT INT,";
                        SQL = SQL + "BUCH_HC INT,";
                        SQL = SQL + "BUCH_VLB BOOLEAN,";
                        SQL = SQL + "BUCH_BESTAND INT,";
                        SQL = SQL + "BUCH_VERTRAG TEXT";
                        SQL = SQL + "BUCH_BOD_VERTRAG TEXT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle BUCH wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox8.isSelected()) {
                        SQL = SQL + "TBL_REZENSION ( ";
                        SQL = SQL + "REZENSION_ID INT PRIMARY KEY,";
                        SQL = SQL + "REZENSION_BUCH INT,";
                        SQL = SQL + "REZENSION_REZENSENT TEXT,";
                        SQL = SQL + "REZENSION_ZEITSCHRIFT INT,";
                        SQL = SQL + "REZENSION_DATEI TEXT,";
                        SQL = SQL + "REZENSION_ANMERKUNG TEXT,";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle REZENSION wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox10.isSelected()) {
                        // 1. Datensatz - Verzichnisse
                        SQL = SQL + "TBL_KONFIGURATION ( ";
                        SQL = SQL + "KONFIGURATION_ID INT PRIMARY KEY, ";
                        SQL = SQL + "KONFIGURATION_STAMMDATEN TEXT, ";
                        SQL = SQL + "KONFIGURATION_EINNAHMEN TEXT, ";
                        SQL = SQL + "KONFIGURATION_AUSGABEN TEXT, ";
                        SQL = SQL + "KONFIGURATION_UMSAETZE TEXT, ";
                        SQL = SQL + "KONFIGURATION_RECHNUNGEN TEXT, ";
                        SQL = SQL + "KONFIGURATION_SICHERUNG TEXT, ";
                        SQL = SQL + "KONFIGURATION_MAHNUNGEN TEXT, ";
                        SQL = SQL + "KONFIGURATION_SCHRIFTVERKEHR TEXT, ";
                        SQL = SQL + "KONFIGURATION_STEUER TEXT, ";
                        SQL = SQL + "KONFIGURATION_BENUTZER TEXT, ";
                        SQL = SQL + "KONFIGURATION_TERMINE TEXT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        // 1. Datensatz - Pfade   
                        SQLAnfrage.executeUpdate("INSERT INTO TBL_KONFIGURATION (KONFIGURATION_ID, "
                                + "KONFIGURATION_STAMMDATEN,"
                                + "KONFIGURATION_EINNAHMEN,"
                                + "KONFIGURATION_AUSGABEN,"
                                + "KONFIGURATION_UMSAETZE,"
                                + "KONFIGURATION_RECHNUNGEN,"
                                + "KONFIGURATION_SICHERUNG,"
                                + "KONFIGURATION_MAHNUNGEN,"
                                + "KONFIGURATION_SCHRIFTVERKEHR,"
                                + "KONFIGURATION_STEUER,"
                                + "KONFIGURATION_TERMINE) VALUES (1, '', '', '', '', '', '', '', '', '', '" + Modulhelferlein.CHMVBenutzer + "', '')");
                        // 2. Datensatz - Finanzamtsdaten   
                        SQLAnfrage.executeUpdate("INSERT INTO TBL_KONFIGURATION (KONFIGURATION_ID, "
                                + "KONFIGURATION_STAMMDATEN,"
                                + "KONFIGURATION_EINNAHMEN,"
                                + "KONFIGURATION_AUSGABEN,"
                                + "KONFIGURATION_UMSAETZE,"
                                + "KONFIGURATION_RECHNUNGEN,"
                                + "KONFIGURATION_SICHERUNG,"
                                + "KONFIGURATION_MAHNUNGEN,"
                                + "KONFIGURATION_SCHRIFTVERKEHR,"
                                + "KONFIGURATION_STEUER,"
                                + "KONFIGURATION_TERMINE) VALUES (2, '', '', '', '', '', '', '', '', '', 'Finanzamt 1', '')");
                        // 3. Datensatz - Finanzamtsdaten   
                        SQLAnfrage.executeUpdate("INSERT INTO TBL_KONFIGURATION (KONFIGURATION_ID, "
                                + "KONFIGURATION_STAMMDATEN,"
                                + "KONFIGURATION_EINNAHMEN,"
                                + "KONFIGURATION_AUSGABEN,"
                                + "KONFIGURATION_UMSAETZE,"
                                + "KONFIGURATION_RECHNUNGEN,"
                                + "KONFIGURATION_SICHERUNG,"
                                + "KONFIGURATION_MAHNUNGEN,"
                                + "KONFIGURATION_SCHRIFTVERKEHR,"
                                + "KONFIGURATION_STEUER,"
                                + "KONFIGURATION_TERMINE) VALUES (3, '', '', '', '', '', '', '', '', '', 'Finanzamt 2', '')");
                        // 4. Datensatz - Währungsumrechnung   
                        SQLAnfrage.executeUpdate("INSERT INTO TBL_KONFIGURATION (KONFIGURATION_ID, "
                                + "KONFIGURATION_STAMMDATEN,"
                                + "KONFIGURATION_EINNAHMEN,"
                                + "KONFIGURATION_AUSGABEN,"
                                + "KONFIGURATION_UMSAETZE,"
                                + "KONFIGURATION_RECHNUNGEN,"
                                + "KONFIGURATION_SICHERUNG,"
                                + "KONFIGURATION_MAHNUNGEN,"
                                + "KONFIGURATION_SCHRIFTVERKEHR,"
                                + "KONFIGURATION_STEUER,"
                                + "KONFIGURATION_TERMINE) VALUES (4, '', '', '', '', '', '', '', '', '', 'Waehrung', '')");
                        // 5. Datensatz - Sicherung   
                        SQLAnfrage.executeUpdate("INSERT INTO TBL_KONFIGURATION (KONFIGURATION_ID, "
                                + "KONFIGURATION_STAMMDATEN,"
                                + "KONFIGURATION_EINNAHMEN,"
                                + "KONFIGURATION_AUSGABEN,"
                                + "KONFIGURATION_UMSAETZE,"
                                + "KONFIGURATION_RECHNUNGEN,"
                                + "KONFIGURATION_SICHERUNG,"
                                + "KONFIGURATION_MAHNUNGEN,"
                                + "KONFIGURATION_SCHRIFTVERKEHR,"
                                + "KONFIGURATION_STEUER,"
                                + "KONFIGURATION_TERMINE) VALUES (5, '', '', '', '', '', '', '', '', '', 'Datensicherung', '')");
                        // 6. Datensatz - Mail   
                        SQLAnfrage.executeUpdate("INSERT INTO TBL_KONFIGURATION (KONFIGURATION_ID, "
                                + "KONFIGURATION_STAMMDATEN,"
                                + "KONFIGURATION_EINNAHMEN,"
                                + "KONFIGURATION_AUSGABEN,"
                                + "KONFIGURATION_UMSAETZE,"
                                + "KONFIGURATION_RECHNUNGEN,"
                                + "KONFIGURATION_SICHERUNG,"
                                + "KONFIGURATION_MAHNUNGEN,"
                                + "KONFIGURATION_SCHRIFTVERKEHR,"
                                + "KONFIGURATION_STEUER,"
                                + "KONFIGURATION_TERMINE) VALUES (6, '', '', '', '', '', '', '', '', '', 'Mailkonfiguration', '')");
                        Modulhelferlein.Infomeldung("Tabelle KONFIGURATION wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox11.isSelected()) {
                        SQL = SQL + "TBL_TERMINE ( ";
                        SQL = SQL + "TERMIN_ID INT PRIMARY KEY, ";
                        SQL = SQL + "TERMIN_DATUM DATE, ";
                        SQL = SQL + "TERMIN_BESCHREIBUNG TEXT, ";
                        SQL = SQL + "TERMIN_ERLEDIGT TEXT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle TERMIN wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox18.isSelected()) {
                        SQL = SQL + "TBL_AUFGABEN ( ";
                        SQL = SQL + "AUFGABE_ID INT PRIMARY KEY, ";
                        SQL = SQL + "AUFGABE_DATUM DATE, ";
                        SQL = SQL + "AUFGABE_BESCHREIBUNG TEXT, ";
                        SQL = SQL + "AUFGABE_ERLEDIGT TEXT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle TERMIN wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox12.isSelected()) {
                        SQL = SQL + "TBL_BESTELLNR ( ";
                        SQL = SQL + "BESTELLNR_ID INT PRIMARY KEY, ";
                        SQL = SQL + "BESTELLNR_NUMMER INT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        SQLAnfrage.executeUpdate("INSERT INTO TBL_BESTELLNR (BESTELLNR_ID, BESTELLNR_NUMMER) VALUES (1, 1)");
                        Modulhelferlein.Infomeldung("Tabelle BESTELLNR wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox20.isSelected()) {
                        SQL = SQL + "TBL_BENUTZER ( ";
                        SQL = SQL + "BENUTZER_ID INT PRIMARY KEY, ";
                        SQL = SQL + "BENUTZER_ID INT, ";
                        SQL = SQL + "BENUTZER_NAME TEXT";
                        SQL = SQL + "BENUTZER_RECHTE INT, ";
                        SQL = SQL + "BENUTZER_KENNWORT TEXT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle BENUTZER wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox3.isSelected()) {
                        SQL = SQL + "TBL_MAILVERTEILER ( ";
                        SQL = SQL + "MAILVERTEILER_ID INT PRIMARY KEY, ";
                        SQL = SQL + "MAILVERTEILER_NAME TEXT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle MAILVERTEILER wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox4.isSelected()) {
                        SQL = SQL + "TBL_MAILADRESSE ( ";
                        SQL = SQL + "MAILADRESSE_ID INT PRIMARY KEY, ";
                        SQL = SQL + "MAILADRESSE_VERTEILER INT, ";
                        SQL = SQL + "MAILADRESSE_ADRESSE TEXT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle MAILADRESSE wurde erstellt");
                    }
                    if (jCheckBox14.isSelected()) {
                        SQL = SQL + "TBL_REZENSIONEN_AUS ( ";
                        SQL = SQL + "REZENSIONEN_AUS_ID INT PRIMARY KEY, ";
                        SQL = SQL + "REZENSIONEN_AUS_BUCH INT, ";
                        SQL = SQL + "REZENSIONEN_AUS_ZEITSCHRIFT INT, ";
                        SQL = SQL + "REZENSIONEN_AUS_DATUM DATE, ";
                        SQL = SQL + "REZENSIONEN_AUS_TYP INT, ";
                        SQL = SQL + "REZENSIONEN_AUS_NUMMER TEXT, ";
                        SQL = SQL + "REZENSIONEN_AUS_DRITTE TEXT, ";
                        SQL = SQL + "REZENSIONEN_AUS_REZENSENT ID";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle MAILADRESSE wurde erstellt");
                    }
                    if (jCheckBox15.isSelected()) {
                        SQL = SQL + "TBL_REZENSIONEN_AUS_DETAIL ( ";
                        SQL = SQL + "REZENSIONEN_AUS_DETAIL_ID INT PRIMARY KEY, ";
                        SQL = SQL + "REZENSIONEN_AUS_DETAIL_NUMMER TEXT, ";
                        SQL = SQL + "REZENSIONEN_AUS_DETAIL_BUCH INT, ";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle BESTELLUNG_DETAIL wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox16.isSelected()) {
                        SQL = SQL + "TBL_HILFE_BUCH ( ";
                        SQL = SQL + "BUCH_AUTOR TEXT,";
                        SQL = SQL + "BUCH_TITEL TEXT,";
                        SQL = SQL + "BUCH_PREIS FLOAT,";
                        SQL = SQL + "BUCH_EK FLOAT,";
                        SQL = SQL + "BUCH_ISBN TEXT,";
                        SQL = SQL + "BUCH_SEITEN INT,";
                        SQL = SQL + "BUCH_BESTAND INT,";
                        SQL = SQL + "BUCH_JAHR TEXT,";
                        SQL = SQL + "BUCH_COVER TEXT,";
                        SQL = SQL + "BUCH_AUFLAGE INT,";
                        SQL = SQL + "BUCH_HC INT,";
                        SQL = SQL + "BUCH_ID INT PRIMARY KEY";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle HILFE_BUCH wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox17.isSelected()) {
                        SQL = SQL + "TBL_HONORAR ( ";
                        SQL = SQL + "HONORAR_ID INT PRIMARY KEY,";
                        SQL = SQL + "HONORAR_TITEL TEXT,";
                        SQL = SQL + "HONORAR_VEREINBART BOOLEAN,";
                        SQL = SQL + "HONORAR_ANZAHL_1 INT,";
                        SQL = SQL + "HONORAR_PROZENT_1 INT,";
                        SQL = SQL + "HONORAR_ANZAHL_2 INT,";
                        SQL = SQL + "HONORAR_PROZENT_2 INT,";
                        SQL = SQL + "HONORAR_ISBN_PB TEXT,";
                        SQL = SQL + "HONORAR_ANZAHL_PB INT,";
                        SQL = SQL + "HONORAR_ANZAHL_BOD_PB INT,";
                        SQL = SQL + "HONORAR_PREIS_PB FLOAT,";
                        SQL = SQL + "HONORAR_ISBN_HC TEXT,";
                        SQL = SQL + "HONORAR_ANZAHL_HC INT,";
                        SQL = SQL + "HONORAR_PREIS_HC FLOAT,";
                        SQL = SQL + "HONORAR_ANZAHL_BOD_HC INT,";
                        SQL = SQL + "HONORAR_MARGE FLOAT,";
                        SQL = SQL + "HONORAR_BODPROZENT FLOAT,";
                        SQL = SQL + "HONORAR_BODFIX INT,";
                        SQL = SQL + "HONORAR_GESAMTBETRACHTUNG BOOLEAN,";
                        SQL = SQL + "HONORAR_ISBN_EB TEXT,";
                        SQL = SQL + "HONORAR_ANZAHL_EB INT,";
                        SQL = SQL + "HONORAR_PREIS_EB FLOAT,";
                        SQL = SQL + "HONORAR_ANZAHL_BOD_EB INT,";
                        SQL = SQL + "HONORAR_VERTEILEN BOOLEAN,";
                        SQL = SQL + "HONORAR_AUTOR_1 INT,";
                        SQL = SQL + "HONORAR_AUTOR_2 INT,";
                        SQL = SQL + "HONORAR_ZAHLEN INT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        
                        SQL = "CREATE TABLE ";
                        SQL = SQL + "TBL_VERRECHNUNG ( ";
                        SQL = SQL + "VERRECHNUNG_ID INT PRIMARY KEY,";
                        SQL = SQL + "VERRECHNUNG_ISBN TEXT,";
                        SQL = SQL + "VERRECHNUNG_TITEL TEXT,";
                        SQL = SQL + "VERRECHNUNG_BETRAG FLOAT,";
                        SQL = SQL + "VERRECHNUNG_RECHNUNG BOOLEAN";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle HONORAR sowie VERRECHNUNG wurde erstellt");
                    }
                    SQL = "CREATE TABLE ";
                    if (jCheckBox19.isSelected()) {
                        SQL = SQL + "TBL_VERKAUF ( ";
                        SQL = SQL + "VERKAUF_ID INT PRIMARY KEY,";
                        SQL = SQL + "VERKAUF_ISBN TEXT,";
                        SQL = SQL + "VERKAUF_BOD TEXT,";
                        SQL = SQL + "VERKAUF_AUTOR TEXT,";
                        SQL = SQL + "VERKAUF_TITEL TEXT,";
                        SQL = SQL + "VERKAUF_ANZAHL_BOD INT,";
                        SQL = SQL + "VERKAUF_ANZAHL_GESAMT INT,";
                        SQL = SQL + "VERKAUF_ANZAHL_AUTOR INT,";
                        SQL = SQL + "VERKAUF_ANZAHL_GESCHENK INT,";
                        SQL = SQL + "VERKAUF_UMSATZ FLOAT";
                        SQL = SQL + "VERKAUF_UMSATZ_BOD FLOAT";
                        SQL = SQL + ")";
                        SQLAnfrage.executeUpdate(SQL);
                        Modulhelferlein.Infomeldung("Tabelle VERKAUF wurde erstellt");
                    }
                } catch (SQLException exept) {
                    Modulhelferlein.Fehlermeldung("Tabelle erstellen","SQL-Exception: Fehler beim Erstellen der Tabelle(n):" , exept.getMessage());
                }
            }
            this.dispose();
        }
    }//GEN-LAST:event_jButtonEndeActionPerformed

    private void jButtonSchliessenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSchliessenActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonSchliessenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
/**        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarolaHartmannMilesVerlag.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
*/        
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            _DlgTabellenErstellen dialog = new _DlgTabellenErstellen(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    dialog.setVisible(false);
                }
            });
            dialog.setVisible(true);
        });
    }

    private Connection conn;
    private Statement SQLAnfrage;

    private String SQL;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel panel1;
    private JLabel jLabel4;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JCheckBox jCheckBox2;
    private JCheckBox jCheckBox6;
    private JCheckBox jCheckBox10;
    private JCheckBox jCheckBox1;
    private JCheckBox jCheckBox5;
    private JCheckBox jCheckBox11;
    private JCheckBox jCheckBox3;
    private JCheckBox jCheckBox7;
    private JCheckBox jCheckBox12;
    private JCheckBox jCheckBox4;
    private JCheckBox jCheckBox8;
    private JCheckBox jCheckBox13;
    private JCheckBox jCheckBox15;
    private JCheckBox jCheckBox16;
    private JCheckBox jCheckBox14;
    private JCheckBox jCheckBox17;
    private JCheckBox jCheckBox9;
    private JCheckBox jCheckBox18;
    private JCheckBox jCheckBox19;
    private JButton jButtonEnde;
    private JButton jButtonSchliessen;
    private JCheckBox jCheckBox20;
    // End of variables declaration//GEN-END:variables
}
